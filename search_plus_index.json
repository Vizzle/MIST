{"./":{"url":"./","title":"简介","keywords":"","body":"MIST是什么 MIST是口碑客户端研发的一套高性能的动态模板引擎，它使用JSON格式描述页面(模板)结构，同时支持CSS样式表达和动态脚本(JS等)嵌入。由于模板文件可随服务端下发，因此客户端可具备动态更新页面的能力；和React Native或Weex不同，MIST面向客户端开发人员，从设计上保证Native原生的性能和体验；此外，MIST还提供了一种全新的UI开发方式，可极大提高iOS端的页面开发效率 MIST特点 FlexBox布局算法：MIST内部实现了CSS3 FlexBox的标准布局算法，作为模板布局的核心能力；对比现有的FlexBox算法(RN, Weex), MIST支持的属性更完整，灵活性更高 ；算法采用C语言实现，无运行时的性能损耗 高效的Parser：MIST内部实现了一套功能完备的语法解释器，支持基本的数学运算、逻辑运算、比较运算、条件表达式等；此外，MIST还支持OC类方法的调用作为对Native通信能力的补充 UI异步绘制：MIST对UI底层渲染做了深度优化，对模板内的UI元素支持整体的异步光栅化绘制，可以极大的提升FPS，使页面具有更流畅的滑动体验 React：MIST将React.js的思想移植到了客户端，使用Objective-C++实现了一套Native版本的React。因此MIST底层也具备和React相似的运作机制，包括Virtual Dom结构，类似React的state处理，使用Immutable数据和One-Way data flow。MIST模板在此之上进行了一层抽象，使开发者不需要理解上述概念，也不需要关心具体的实现细节，降低上手门槛 支持脚本扩展：为了弥补模板和Native通信能力的不足，模板支持脚本能力的扩展，例如JSPatch，Wax等开源解决方案 MIST应用情况 MIST从2016年6月开始应用在支付宝口碑业务中，顺利支撑了客户端日常项目迭代，通过了千万UV的考验，目前已经趋于稳定；在双12大促中，口碑主会场采用MIST构建，快速支撑需求发布和突发应急；截止到目前，累计动态发布35+次，推送模板数量55+，成功率稳定在99% MIST开发模式 关于MIST的后端 作为端到端动态化解决方案，MIST后端也做了很多工作，包括模板管理，页面可视化配置等等，由于该文档面向客户端部分，后端部分的内容不在这里展开 更多参考： 了解Flexlayout 了解异步渲染 MIST在双12大促中的应用 "},"basics/Tutorial.html":{"url":"basics/Tutorial.html","title":"快速上手","keywords":"","body":"快速上手Hello World样式数据绑定布局元素重复状态快速上手 Hello World Mist 使用 Json 来描述模版，下面是 Mist 的 Hello World： {\"layout\":{\"type\":\"text\",\"style\":{\"text\":\"Hello world!\"}}} 第 2 行 layout 指定模版的布局，layout 里有一个 text 元素，style 里指定元素的样式属性。 样式 为元素设置样式属性以实现丰富多彩的界面，完整样式属性见这里。 {\"layout\":{\"type\":\"text\",\"style\":{\"text\":\"Hello world!\",\"height\":60,\"color\":\"white\",\"background-color\":\"#E24810\",\"font-size\":18,\"font-style\":\"bold\",\"alignment\":\"center\"}}} 数据绑定 数据： {\"someText\":\"Hello world!\",\"someColor\":\"#E24810\"} 模版： {\"layout\":{\"type\":\"text\",\"style\":{\"text\":\"${someText}\",\"height\":60,\"color\":\"white\",\"background-color\":\"${someColor}\",\"font-size\":18,\"font-style\":\"bold\",\"alignment\":\"center\"}}} 模版中使用 ${} 嵌入表达式，进行数据绑定和一些简单的逻辑处理。 Mist 表达式支持基本的数学运算、逻辑运算等，并可以动态调用部分 native 方法，详见这里。 布局 Mist 使用基于 Flexbox 的布局模型，使用简单功能强大，熟悉以后写界面 so easy~ {\"layout\":{\"style\":{\"height\":60,\"background-color\":\"#E24810\",\"padding\":10,\"spacing\":5},\"children\":[{\"type\":\"image\",\"style\":{\"width\":40,\"height\":40,\"image-url\":\"https://gw.alipayobjects.com/zos/rmsportal/oJGxiJoNVldUwQpaZUrH.png\",\"content-mode\":\"scale-aspect-fit\"}},{\"style\":{\"direction\":\"vertical\",\"justify-content\":\"center\"},\"children\":[{\"type\":\"text\",\"style\":{\"text\":\"MIST\",\"color\":\"white\",\"font-size\":18,\"font-style\":\"bold\"}},{\"type\":\"text\",\"style\":{\"text\":\"口碑客户端团队自主研发的客户端动态模板引擎\",\"color\":\"white\",\"font-size\":13,\"font-style\":\"thin\",\"alignment\":\"center\"}}]}]}} 元素重复 在需要根据数据生成重复的元素时，可以使用 repeat 属性 数据： {\"list\":[{\"name\":\"MIST\",\"icon\":\"https://gw.alipayobjects.com/zos/rmsportal/oJGxiJoNVldUwQpaZUrH.png\",\"desc\":\"口碑客户端团队自主研发的客户端动态模板引擎\",\"color\":\"#E24810\"},{\"name\":\"Koubei\",\"icon\":\"https://gw.alipayobjects.com/zos/rmsportal/dhIEUxgCigfBzZnHPfqY.png\",\"desc\":\"助力商家，让每个人都享受有口碑的服务\",\"color\":\"#E8480C\"},{\"name\":\"Alipay\",\"icon\":\"https://gw.alipayobjects.com/zos/rmsportal/msQPPTFLPEHeErXEfdse.png\",\"desc\":\"支付宝 知托付\",\"color\":\"#00BBEE\"},{\"name\":\"Ant Financial\",\"icon\":\"https://gw.alipayobjects.com/zos/rmsportal/DeSYPOWNsMLMISVDqZol.png\",\"desc\":\"为世界带来微小而美好的改变\",\"color\":\"#009FEC\"}]} 模版： {\"layout\":{\"style\":{\"direction\":\"vertical\",\"spacing\":\"1px\"},\"children\":[{\"repeat\":\"${list}\",\"style\":{\"height\":60,\"background-color\":\"${_item_.color}\",\"padding\":10,\"spacing\":5},\"children\":[{\"type\":\"image\",\"style\":{\"width\":40,\"height\":40,\"image-url\":\"${_item_.icon}\",\"content-mode\":\"scale-aspect-fit\"}},{\"style\":{\"direction\":\"vertical\",\"justify-content\":\"center\"},\"children\":[{\"type\":\"text\",\"style\":{\"text\":\"${_item_.name}\",\"color\":\"white\",\"font-size\":18,\"font-style\":\"bold\"}},{\"type\":\"text\",\"style\":{\"text\":\"${_item_.desc}\",\"color\":\"white\",\"font-size\":13,\"font-style\":\"thin\",\"alignment\":\"center\"}}]}]}]}} 状态 可以通过更新状态来实现界面的更新 Your browser does not support the video tag. 数据同上 模版： {\"layout\":{\"style\":{\"direction\":\"vertical\",\"spacing\":\"1px\"},\"children\":[{\"repeat\":\"${list}\",\"style\":{\"height\":60,\"background-color\":\"${_item_.color}\",\"padding\":10,\"spacing\":5},\"children\":[{\"type\":\"image\",\"style\":{\"width\":40,\"height\":40,\"image-url\":\"${_item_.icon}\",\"content-mode\":\"scale-aspect-fit\"}},{\"style\":{\"direction\":\"vertical\",\"justify-content\":\"center\"},\"children\":[{\"type\":\"text\",\"style\":{\"text\":\"${_item_.name}\",\"color\":\"white\",\"font-size\":18,\"font-style\":\"bold\"}},{\"type\":\"text\",\"style\":{\"text\":\"${_item_.desc}\",\"color\":\"white\",\"font-size\":13,\"font-style\":\"thin\",\"alignment\":\"center\"}}]}]},{\"gone\":\"${state.expanded}\",\"type\":\"button\",\"style\":{\"title\":\"显示全部\",\"title-color\":\"#888\",\"background-image\":{\"highlighted\":\"#ccc\"},\"padding\":10},\"on-tap\":{\"updateState:\":{\"expanded\":true}}}]}} 在 显示全部 按钮的 on-tap 事件中调用 updateState: 触发了状态更新，expanded 被设置为 true，整个界面重新生成 "},"basics/State.html":{"url":"basics/State.html","title":"State","keywords":"","body":"State初始状态状态更新State 在 Mist 中，不可直接修改视图，而是通过更新状态使视图重新计算。 比如，如果要实现展开/收起的功能，每次点击时只需改变状态，即可自动重新生成视图。 Your browser does not support the video tag. block { display:block; overflow:scroll; max-height:0px; transition: max-height 300ms; -webkit-transition: max-height 300ms; } .display { max-height:500px; } function toggleBlock(event) { block = event.target.parentNode.querySelector(\"block\"); if (block.className.indexOf(\"display\") >= 0) { block.className = \"\"; } else { block.className = \"display\"; } event && event.preventDefault(); } 显示／隐藏代码 {\"layout\":{\"style\":{\"padding\":10,\"direction\":\"vertical\"},\"children\":[{\"children\":[{\"type\":\"text\",\"style\":{\"text\":\"Lorem ipsum\",\"font-size\":20}},{\"type\":\"text\",\"style\":{\"text\":\"${state.expanded ? '收起' : '展开'}\",\"color\":\"blue\",\"margin-left\":\"auto\"},\"on-tap\":{\"updateState:\":{\"expanded\":\"${!state.expanded}\"}}}]},{\"gone\":\"${!state.expanded}\",\"type\":\"text\",\"style\":{\"text\":\"Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\"font-size\":16,\"color\":\"gray\",\"margin-top\":6,\"lines\":0}}]}} 初始状态 初始状态通过模版中的 state 定义，或在对应 Controller 中重写 initialState 方法，模版中的 state 属性优先使用。 状态更新 调用 Controller 中的 updateState 方法更新状态。 "},"basics/Layout.html":{"url":"basics/Layout.html","title":"布局","keywords":"","body":"布局基本属性width/heightmin-width/min-height/max-width/max-heightmarginpaddingFlexboxdirectionwrapalign-itemsjustify-contentalign-contentalign-selfflex-growflex-shrinkflex-basis扩展属性spacingline-spacingfixedlinesitems-per-line单位与百分比百分比单位布局 Mist 使用的是基于 Flexbox 的布局模型，并进行了一些扩展，基本上满足大部分的布局需要。 所有元素都可以使用布局属性，写在 style 里。 基本属性 width/height 指定元素的宽高，默认值为 auto。 auto: 根据元素的内容或子元素的尺寸自动计算 length: 指定固定的尺寸 min-width/min-height/max-width/max-height 元素的最小/最大尺寸。 length: 元素的最小/最大尺寸 margin 元素的外边距，默认值为 0。 auto: 所有为 auto 的 margin 均分剩余空间 length: 指定固定的尺寸 注意，当指定为百分比时，无论是左右边距还是上下边距，其百分比都是相对父容器的内容宽度（即减去 padding）。 margin-top、margin-bottom、margin-left、margin-right 分别设置上、下、左、右边距。margin 设置四个方向边距为同一个值。 padding 元素的内边距，默认值为 0。 length: 指定固定的尺寸 注意，当指定为百分比时，无论是左右边距还是上下边距，其百分比都是相对父容器的内容宽度（即减去 padding）。 padding-top、padding-bottom、padding-left、padding-right 分别设置上、下、左、右边距。padding 设置四个方向边距为同一个值。 注意：对于非容器元素，padding 只会影响元素的尺寸，而不会影响其内容的绘制。 Flexbox Flexbox 是 W3C 推出的一种新的布局方案，可以简便、完整、响应式地实现各种页面布局。 Mist 实现了基本的 Flexbox 布局算法，支持的 Flexbox 属性有 flex-direction, flex-wrap, align-items, justify-content, align-content, align-self, flex-grow, flex-shrink, flex-basis。 此外，Mist 增加了一些扩展属性：spacing, line-spacing, fixed, lines, items-per-line。 direction 决定子元素的排列方向，默认为 horizontal。 horizontal: 从左到右排列 vertical: 从上到下排列 horizontal-reverse: 从右到左排列 vertical-reverse: 从下到上排列 block { display:block; overflow:scroll; max-height:0px; transition: max-height 300ms; -webkit-transition: max-height 300ms; } .display { max-height:500px; } function toggleBlock(event) { block = event.target.parentNode.querySelector(\"block\"); if (block.className.indexOf(\"display\") >= 0) { block.className = \"\"; } else { block.className = \"display\"; } event && event.preventDefault(); } 显示／隐藏代码 {\"layout\":{\"vars\":{\"direction\":[\"horizontal\",\"vertical\",\"horizontal-reverse\",\"vertical-reverse\"]},\"style\":{\"spacing\":25,\"padding\":15,\"width\":600},\"children\":[{\"repeat\":\"${direction.count}\",\"style\":{\"direction\":\"vertical\",\"flex-grow\":1,\"flex-basis\":0,\"spacing\":2},\"children\":[{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"text\":\"${direction[_index_]}\"}},{\"style\":{\"background-color\":\"#aaa\",\"padding\":5,\"spacing\":5,\"height\":100,\"flex-grow\":1,\"direction\":\"${direction[_index_]}\",\"align-items\":\"stretch\"},\"children\":[{\"repeat\":3,\"type\":\"text\",\"style\":{\"flex-grow\":1,\"text\":\"${_index_ + 1}\",\"font-size\":20,\"alignment\":\"center\",\"background-color\":\"#E24810\",\"color\":\"white\"}}]}]}]}} wrap 子元素是否允许换行。 nowrap: 子元素超出容器时，所有子元素按照 flex-shrink 缩小。 wrap: 子元素超出容器时将换行。 wrap-reverse: 子元素超出容器时将换行，方向与 wrap 相反。 block { display:block; overflow:scroll; max-height:0px; transition: max-height 300ms; -webkit-transition: max-height 300ms; } .display { max-height:500px; } function toggleBlock(event) { block = event.target.parentNode.querySelector(\"block\"); if (block.className.indexOf(\"display\") >= 0) { block.className = \"\"; } else { block.className = \"display\"; } event && event.preventDefault(); } 显示／隐藏代码 {\"layout\":{\"vars\":{\"wrap\":[\"nowrap\",\"wrap\",\"wrap-reverse\"]},\"style\":{\"spacing\":25,\"padding\":15,\"width\":600},\"children\":[{\"repeat\":\"${wrap.count}\",\"style\":{\"direction\":\"vertical\",\"flex-grow\":1,\"flex-basis\":0,\"spacing\":2},\"children\":[{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"text\":\"${wrap[_index_]}\"}},{\"style\":{\"background-color\":\"#aaa\",\"padding\":5,\"spacing\":5,\"line-spacing\":5,\"height\":100,\"flex-grow\":1,\"wrap\":\"${wrap[_index_]}\",\"align-items\":\"stretch\"},\"children\":[{\"repeat\":5,\"type\":\"text\",\"style\":{\"width\":50,\"text\":\"${_index_ + 1}\",\"font-size\":20,\"alignment\":\"center\",\"background-color\":\"#E24810\",\"color\":\"white\"}}]}]}]}} align-items 子元素在当前行的排列方向的垂直方向上的对齐方式。 每个子元素的 align-self 属性可重写 align-items 属性。 start: 元素位于容器的开头 center: 元素位于容器的中心 end: 元素位于容器的结尾 stretch: 默认值。元素拉伸以填满容器 baseline: 根据元素的基线位置对齐。文本的基线为第一行文字的基线，容器的基线为其第一个元素的基线。 block { display:block; overflow:scroll; max-height:0px; transition: max-height 300ms; -webkit-transition: max-height 300ms; } .display { max-height:500px; } function toggleBlock(event) { block = event.target.parentNode.querySelector(\"block\"); if (block.className.indexOf(\"display\") >= 0) { block.className = \"\"; } else { block.className = \"display\"; } event && event.preventDefault(); } 显示／隐藏代码 {\"layout\":{\"vars\":{\"alignItems\":[\"start\",\"center\",\"end\",\"stretch\",\"baseline\"]},\"style\":{\"width\":600,\"items-per-line\":3,\"wrap\":true,\"spacing\":25,\"line-spacing\":20,\"padding\":15},\"children\":[{\"repeat\":\"${alignItems.count}\",\"vars\":{\"isBaseline\":\"${_index_ == 4}\"},\"style\":{\"direction\":\"vertical\",\"flex-basis\":\"${isBaseline ? 25 : 0}\",\"flex-grow\":\"${isBaseline ? 2 : 1}\",\"spacing\":2},\"children\":[{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"text\":\"${alignItems[_index_]}\"}},{\"vars\":{\"items\":[50,80,60,70]},\"style\":{\"background-color\":\"#aaa\",\"padding\":5,\"spacing\":5,\"line-spacing\":5,\"height\":100,\"flex-grow\":1,\"align-items\":\"${alignItems[_index_]}\"},\"children\":[{\"repeat\":\"${items}\",\"type\":\"text\",\"style\":{\"text\":\"${isBaseline ? 'test text' : ''}\",\"flex-grow\":1,\"height\":\"${isBaseline ? 'auto' : _item_}\",\"padding-top\":10,\"padding-bottom\":\"${isBaseline ? _item_ * 0.5 : 0}\",\"font-size\":\"${isBaseline ? _item_ * 0.3 : 0}\",\"alignment\":\"center\",\"background-color\":\"#E24810\",\"color\":\"white\"}}]}]}]}} Name Age Home town Mark Zuckerberg 32 New York, U.S. {\"padding\":15,\"background-color\":\"#eee\",\"spacing\":10,\"children\":[{\"direction\":\"vertical\",\"align-items\":\"end\",\"spacing\":3,\"children\":[{\"type\":\"text\",\"text\":\"Name\",\"background-color\":\"red\",\"color\":\"white\",\"corner-radius\":2,\"padding-left\":3,\"padding-right\":3},{\"type\":\"text\",\"text\":\"Age\",\"background-color\":\"red\",\"color\":\"white\",\"corner-radius\":2,\"padding-left\":3,\"padding-right\":3},{\"type\":\"text\",\"text\":\"Home town\",\"background-color\":\"red\",\"color\":\"white\",\"corner-radius\":2,\"padding-left\":3,\"padding-right\":3}]},{\"direction\":\"vertical\",\"align-items\":\"start\",\"spacing\":3,\"children\":[{\"type\":\"text\",\"text\":\"Mark Zuckerberg\",\"color\":\"#888\"},{\"type\":\"text\",\"text\":\"32\",\"color\":\"#888\"},{\"type\":\"text\",\"text\":\"New York, U.S.\",\"color\":\"#888\"}]}]} justify-content 子元素在布局方向上的对齐方式。 start: 默认值。元素位于容器的开头 end: 元素位于容器的结尾 center: 元素位于容器的中心 space-between: 所有子元素均匀分布在行内，空白平均分布在每两个元素中间，首尾元素对齐到容器两端 space-around: 所有子元素均匀分布在行内，空白平均分布在所有元素两侧 block { display:block; overflow:scroll; max-height:0px; transition: max-height 300ms; -webkit-transition: max-height 300ms; } .display { max-height:500px; } function toggleBlock(event) { block = event.target.parentNode.querySelector(\"block\"); if (block.className.indexOf(\"display\") >= 0) { block.className = \"\"; } else { block.className = \"display\"; } event && event.preventDefault(); } 显示／隐藏代码 {\"layout\":{\"vars\":{\"justifyContent\":[\"start\",\"center\",\"end\",\"space-between\",\"space-around\"]},\"style\":{\"direction\":\"vertical\",\"width\":400,\"spacing\":15,\"padding\":15},\"children\":[{\"repeat\":\"${justifyContent.count}\",\"style\":{\"direction\":\"vertical\",\"spacing\":2},\"children\":[{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"text\":\"${justifyContent[_index_]}\"}},{\"vars\":{\"items\":[50,30,70,20]},\"style\":{\"background-color\":\"#aaa\",\"padding\":5,\"spacing\":5,\"line-spacing\":5,\"flex-grow\":1,\"justify-content\":\"${justifyContent[_index_]}\"},\"children\":[{\"repeat\":\"${items}\",\"style\":{\"width\":\"${_item_}\",\"height\":30,\"background-color\":\"#E24810\"}}]}]}]}} align-content 容器内各行的对齐方式 start: 行位于容器的开头 end: 行位于容器的结尾 center: 行位于容器的中心 stretch: 默认值。行拉伸以填满容器 space-between: 所有行均匀分布在容器内，空白平均分布在每两行中间，首尾行对齐到容器两端 space-around: 所有行均匀分布在容器内，空白平均分布在所有行两侧 block { display:block; overflow:scroll; max-height:0px; transition: max-height 300ms; -webkit-transition: max-height 300ms; } .display { max-height:500px; } function toggleBlock(event) { block = event.target.parentNode.querySelector(\"block\"); if (block.className.indexOf(\"display\") >= 0) { block.className = \"\"; } else { block.className = \"display\"; } event && event.preventDefault(); } 显示／隐藏代码 {\"layout\":{\"vars\":{\"alignContent\":[\"start\",\"center\",\"end\",\"stretch\",\"space-between\",\"space-around\"]},\"style\":{\"width\":600,\"items-per-line\":3,\"wrap\":true,\"spacing\":25,\"line-spacing\":20,\"padding\":15},\"children\":[{\"repeat\":\"${alignContent.count}\",\"style\":{\"direction\":\"vertical\",\"flex-basis\":0,\"flex-grow\":1,\"spacing\":2},\"children\":[{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"text\":\"${alignContent[_index_]}\"}},{\"vars\":{\"items\":[50,30,70,20,40,60,40,50]},\"style\":{\"height\":110,\"wrap\":true,\"background-color\":\"#aaa\",\"padding\":5,\"spacing\":5,\"line-spacing\":5,\"align-content\":\"${alignContent[_index_]}\"},\"children\":[{\"repeat\":\"${items}\",\"style\":{\"width\":\"${_item_}\",\"min-height\":20,\"background-color\":\"#E24810\"}}]}]}]}} align-self 覆写父元素的 align-items，指定元素在父元素中（沿父元素布局方向）的对齐方式，取值同 align-items。 flex-grow 元素放大的权值，默认值为 0（即元素不会被放大）。不能为负数。 当容器的空间（在布局方向上）有剩余时，所有子元素（在布局方向上）的尺寸会放大以填满剩余空间，flex-grow 决定元素放大的权值。见 flex-basis。 当所有子元素的 flex-grow 总和小于 1 时，总权值按 1 计算，即剩余空间不会被填满，如下图第 3 行。 block { display:block; overflow:scroll; max-height:0px; transition: max-height 300ms; -webkit-transition: max-height 300ms; } .display { max-height:500px; } function toggleBlock(event) { block = event.target.parentNode.querySelector(\"block\"); if (block.className.indexOf(\"display\") >= 0) { block.className = \"\"; } else { block.className = \"display\"; } event && event.preventDefault(); } 显示／隐藏代码 {\"layout\":{\"vars\":{\"flexGrow\":[[1,1,1],[3,2,1],[0.1,0.2,0.2]]},\"style\":{\"direction\":\"vertical\",\"width\":400,\"spacing\":15,\"padding\":15},\"children\":[{\"repeat\":\"${flexGrow}\",\"style\":{\"direction\":\"vertical\",\"spacing\":2},\"children\":[{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"text\":\"flex-grow 分别为 ${_item_.join(', ')}\"}},{\"style\":{\"background-color\":\"#aaa\",\"padding\":5,\"spacing\":5,\"line-spacing\":5,\"flex-grow\":1},\"children\":[{\"repeat\":\"${_item_}\",\"style\":{\"flex-grow\":\"${_item_}\",\"height\":30,\"background-color\":\"#E24810\"}}]}]}]}} flex-shrink 元素缩小的权值，默认值为 1。不能为负数。 当容器的空间不足以放下所有子元素时，所有子元素的大小会缩小以填满剩余空间。元素的 flex-basis 也会计入权值，即实际权值为 flex-shrink * flex-basis 。 默认值为 1，也就是说，当空间不足时，所有元素等比缩小。 像图标、头像之类的元素，一般是不允许缩小的，这时记得将 flex-shrink 设置为 0 。 block { display:block; overflow:scroll; max-height:0px; transition: max-height 300ms; -webkit-transition: max-height 300ms; } .display { max-height:500px; } function toggleBlock(event) { block = event.target.parentNode.querySelector(\"block\"); if (block.className.indexOf(\"display\") >= 0) { block.className = \"\"; } else { block.className = \"display\"; } event && event.preventDefault(); } 显示／隐藏代码 {\"layout\":{\"vars\":{\"items\":[{\"desc\":\"宽度、flex-shrink 都相等\",\"width\":[200,200,200],\"flexShrink\":[1,1,1]},{\"desc\":\"宽度相等，flex-shrink 分别为 1, 2, 3\",\"width\":[200,200,200],\"flexShrink\":[1,2,3]},{\"desc\":\"flex-shrink 相等，宽度分别为 100, 200, 300\",\"width\":[100,200,300],\"flexShrink\":[1,1,1]}]},\"style\":{\"direction\":\"vertical\",\"width\":400,\"spacing\":15,\"padding\":15},\"children\":[{\"repeat\":\"${items}\",\"vars\":{\"item\":\"${_item_}\"},\"style\":{\"direction\":\"vertical\",\"spacing\":2},\"children\":[{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"text\":\"${_item_.desc}\"}},{\"style\":{\"background-color\":\"#aaa\",\"padding\":5,\"spacing\":5,\"line-spacing\":5,\"flex-grow\":1},\"children\":[{\"repeat\":\"${item.width.count}\",\"style\":{\"width\":\"${item.width[_index_]}\",\"flex-shrink\":\"${item.flexShrink[_index_]}\",\"height\":30,\"background-color\":\"#E24810\"}}]}]}]}} flex-basis 元素伸缩时的基准尺寸。容器计算剩余空间时，使用子元素的基准尺寸来计算已分配空间。默认值为 auto。 auto: 取 width/height 的值（取决于父容器的布局方向） content: 取元素的内容尺寸 length: 设置固定的尺寸或百分比 如下图，3个子元素的 flex-grow 分别为 1, 1, 2 ，先根据每个元素的 flex-basis 计算各自的基本尺寸，再将剩余空间按权值分配给每个元素。 block { display:block; overflow:scroll; max-height:0px; transition: max-height 300ms; -webkit-transition: max-height 300ms; } .display { max-height:500px; } function toggleBlock(event) { block = event.target.parentNode.querySelector(\"block\"); if (block.className.indexOf(\"display\") >= 0) { block.className = \"\"; } else { block.className = \"display\"; } event && event.preventDefault(); } 显示／隐藏代码 {\"layout\":{\"vars\":{\"flexBasis\":[\"auto\",0,100]},\"style\":{\"direction\":\"vertical\",\"width\":400,\"spacing\":25,\"padding\":15},\"children\":[{\"repeat\":\"${flexBasis}\",\"vars\":{\"value\":\"${_item_}\"},\"style\":{\"direction\":\"vertical\",\"spacing\":2},\"children\":[{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"text\":\"flex-basis : ${_item_}\"}},{\"style\":{\"background-color\":\"#aaa\",\"padding\":5,\"spacing\":5,\"line-spacing\":5,\"flex-grow\":1},\"children\":[{\"repeat\":\"${['AAAAA', 'BBBBBBBBB', 'CCC']}\",\"type\":\"text\",\"style\":{\"text\":\"${_item_}\",\"flex-basis\":\"${value}\",\"color\":\"white\",\"flex-grow\":\"${_index_ == 2 ? 2 : 1}\",\"height\":30,\"background-color\":\"#E24810\"}}]}]}]}} 扩展属性 spacing 子元素间的间距。 为每两个子元素之间添加间距，每行的第一个元素之前和最后一个元素之后不会添加。 block { display:block; overflow:scroll; max-height:0px; transition: max-height 300ms; -webkit-transition: max-height 300ms; } .display { max-height:500px; } function toggleBlock(event) { block = event.target.parentNode.querySelector(\"block\"); if (block.className.indexOf(\"display\") >= 0) { block.className = \"\"; } else { block.className = \"display\"; } event && event.preventDefault(); } 显示／隐藏代码 {\"layout\":{\"vars\":{\"spacing\":[5,15,\"10%\"]},\"style\":{\"direction\":\"vertical\",\"width\":400,\"spacing\":10,\"padding\":15},\"children\":[{\"repeat\":\"${spacing}\",\"vars\":{\"value\":\"${_item_}\"},\"style\":{\"direction\":\"vertical\",\"spacing\":2},\"children\":[{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"text\":\"spacing : ${_item_}\"}},{\"style\":{\"background-color\":\"#aaa\",\"padding\":5,\"spacing\":\"${_item_}\",\"flex-grow\":1},\"children\":[{\"repeat\":\"${[20, 30, 40, 50, 60]}\",\"style\":{\"width\":\"${_item_}\",\"height\":30,\"background-color\":\"#E24810\"}}]}]}]}} line-spacing 多行布局的行间距。 为每两行之间添加间距，跟 spacing 相似。 block { display:block; overflow:scroll; max-height:0px; transition: max-height 300ms; -webkit-transition: max-height 300ms; } .display { max-height:500px; } function toggleBlock(event) { block = event.target.parentNode.querySelector(\"block\"); if (block.className.indexOf(\"display\") >= 0) { block.className = \"\"; } else { block.className = \"display\"; } event && event.preventDefault(); } 显示／隐藏代码 {\"layout\":{\"vars\":{\"lineSpacing\":[5,15,\"10%\"]},\"style\":{\"width\":600,\"spacing\":20,\"padding\":15},\"children\":[{\"repeat\":\"${lineSpacing}\",\"vars\":{\"value\":\"${_item_}\"},\"style\":{\"direction\":\"vertical\",\"spacing\":2},\"children\":[{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"text\":\"line-spacing : ${_item_}\"}},{\"style\":{\"height\":120,\"wrap\":true,\"align-content\":\"start\",\"background-color\":\"#aaa\",\"padding\":5,\"spacing\":5,\"line-spacing\":\"${_item_}\",\"flex-grow\":1},\"children\":[{\"repeat\":\"${[30, 40, 50, 60, 70, 80]}\",\"style\":{\"width\":\"${_item_}\",\"height\":20,\"background-color\":\"#E24810\"}}]}]}]}} fixed 是否为固定布局元素，固定元素不参与弹性布局，也不会对父容器的布局有任何影响，而是直接相对于父元素布局（等其它弹性元素布局完成之后再布局）。fixed 元素通过 width, height, margin 属性来确定元素的位置与大小。 适合用于浮层、角标等元素。默认情况下（不设置 width, height, margin），一个 fixed 元素就是和父容器等大的一个浮层，也可以放置于容器底部作为背景。 fixed 元素并不是一定处于其它元素的最上方，而是同其它元素一样，按照其在父容器里的顺序排列。 block { display:block; overflow:scroll; max-height:0px; transition: max-height 300ms; -webkit-transition: max-height 300ms; } .display { max-height:500px; } function toggleBlock(event) { block = event.target.parentNode.querySelector(\"block\"); if (block.className.indexOf(\"display\") >= 0) { block.className = \"\"; } else { block.className = \"display\"; } event && event.preventDefault(); } 显示／隐藏代码 {\"layout\":{\"vars\":{\"items\":[{\"margin\":5},{\"margin\":\"auto\"},{\"margin-left\":\"50%\"},{\"margin-top\":\"auto\",\"margin-bottom\":\"auto\",\"height\":\"50%\"},{\"margin\":\"auto\",\"margin-top\":0,\"width\":\"50%\"},{\"margin-left\":\"auto\",\"margin-bottom\":\"auto\",\"margin-top\":5,\"margin-right\":5}]},\"style\":{\"wrap\":true,\"items-per-line\":3,\"width\":600,\"spacing\":25,\"line-spacing\":10,\"padding\":15},\"children\":[{\"repeat\":\"${items}\",\"vars\":{\"value\":\"${_item_}\"},\"style\":{\"flex-grow\":1,\"flex-basis\":0,\"direction\":\"vertical\"},\"children\":[{\"style\":{\"height\":100,\"background-color\":\"#aaa\"},\"children\":[{\"type\":\"text\",\"style\":{\"fixed\":true,\"text\":\"Text\",\"alignment\":\"center\",\"color\":\"white\",\"padding\":3,\"width\":\"${_item_.width}\",\"height\":\"${_item_.height}\",\"margin\":\"${_item_.margin}\",\"margin-top\":\"${_item_['margin-top']}\",\"margin-left\":\"${_item_['margin-left']}\",\"margin-bottom\":\"${_item_['margin-bottom']}\",\"margin-right\":\"${_item_['margin-right']}\",\"background-color\":\"#E24810\"}}]},{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"lines\":0,\"text\":\"${_item_.allKeys.select(k -> k + ' : ' + _item_[k]).join('\\\\n')}\"}}]}]}} 标题标题标题 副标题副标题副标题副标题 {\"height\":200,\"direction\":\"vertical\",\"align-items\":\"center\",\"justify-content\":\"center\",\"spacing\":10,\"children\":[{\"fixed\":true,\"type\":\"image\",\"image-url\":\"https://zos.alipayobjects.com/rmsportal/bWgozvMAmwVrKLS.png\"},{\"fixed\":true,\"background-color\":\"#4000\"},{\"type\":\"text\",\"text\":\"标题标题标题\",\"color\":\"white\",\"font-style\":\"bold\",\"font-size\":18},{\"type\":\"text\",\"text\":\"副标题副标题副标题副标题\",\"color\":\"white\",\"font-size\":15},{\"fixed\":true,\"type\":\"image\",\"image-url\":\"https://zos.alipayobjects.com/rmsportal/biYSeGKxXJxercU.png\",\"width\":40,\"height\":40,\"margin-left\":\"auto\",\"margin-bottom\":\"auto\"}]} lines 仅对多行容器有效（即 wrap 不为 nowrap），限制最大行数。默认为 0，即不限制行数。 可以用来隐藏放不下的元素，如下图第 3 行 block { display:block; overflow:scroll; max-height:0px; transition: max-height 300ms; -webkit-transition: max-height 300ms; } .display { max-height:500px; } function toggleBlock(event) { block = event.target.parentNode.querySelector(\"block\"); if (block.className.indexOf(\"display\") >= 0) { block.className = \"\"; } else { block.className = \"display\"; } event && event.preventDefault(); } 显示／隐藏代码 {\"layout\":{\"style\":{\"direction\":\"vertical\",\"width\":400,\"spacing\":10,\"padding\":15},\"children\":[{\"style\":{\"direction\":\"vertical\",\"spacing\":2},\"children\":[{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"text\":\"默认情况\"}},{\"style\":{\"background-color\":\"#aaa\",\"padding\":5,\"spacing\":5},\"children\":[{\"repeat\":5,\"type\":\"text\",\"style\":{\"text\":\"Text Text ${_index_ + 1}\",\"color\":\"white\",\"height\":30,\"background-color\":\"#E24810\"}}]}]},{\"style\":{\"direction\":\"vertical\",\"spacing\":2},\"children\":[{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"text\":\"使用 flex-shrink 实现末尾元素缩略\"}},{\"style\":{\"background-color\":\"#aaa\",\"padding\":5,\"spacing\":5},\"children\":[{\"repeat\":5,\"type\":\"text\",\"style\":{\"text\":\"Text Text ${_index_ + 1}\",\"flex-shrink\":\"${pow(1000, _index_)}\",\"color\":\"white\",\"height\":30,\"background-color\":\"#E24810\"}}]}]},{\"style\":{\"direction\":\"vertical\",\"spacing\":2},\"children\":[{\"type\":\"text\",\"style\":{\"margin-left\":4,\"font-size\":16,\"font-name\":\"HelveticaNeue-Thin\",\"text\":\"使用 wrap 和 lines 实现末尾元素隐藏\"}},{\"style\":{\"background-color\":\"#aaa\",\"padding\":5,\"spacing\":5,\"wrap\":\"wrap\",\"lines\":1},\"children\":[{\"repeat\":5,\"type\":\"text\",\"style\":{\"text\":\"Text Text ${_index_ + 1}\",\"color\":\"white\",\"height\":30,\"background-color\":\"#E24810\"}}]}]}]}} items-per-line 仅对多行容器有效（即 wrap 不为 nowrap），限制每行最大元素个数。默认为 0，即不限制。 单位与百分比 元素的尺寸、边距等属性可以直接指定为一个数字，如 \"width\": 100，也可以使用百分比和单位，如 \"50%\", \"1px\", \"100vw\"。 百分比 百分比表示其最终值是相对于父容器的宽度或高度（减去padding），以下属性支持使用百分比指定： width 相对于父容器的宽度。 height 相对于父容器的高度。 min-width等 同 width/height。 flex-basis 相对于父容器在布局方向上的尺寸。 margin、padding 相对于父容器的宽度。 spacing 相对于父容器在布局方向上的尺寸。 line-spacing 相对于父容器在布局方向的垂直方向上的尺寸。 单位 不带单位时使用系统原生的单位。支持以下单位： px 物理像素，一般用于一像素的分割线或边框。注意与 css 中的 px 不同。mm、cm、vw 等单位详见 FlexLayout.h 文件定义。 "},"basics/Style.html":{"url":"basics/Style.html","title":"样式","keywords":"","body":"样式颜色阴影样式引用样式 样式是所有元素（自定义组件除外）都可以使用的属性，写在 style 里。 .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } background-color 背景颜色，默认为透明。 border-width 边框宽度，默认为 0。可以用 `\"1px\"`表示 1 像素的边框 border-color 边框颜色，默认为黑色。 corner-radius 圆角半径，默认为 0。可以使用 `corner-radius-top-left`、`corner-radius-top-right`、`corner-radius-bottom-left`、`corner-radius-bottom-right` 分别指定每个角的圆角半径。 user-interaction-enabled 设置生成的 view 的userInteractionEnabled。默认不设置。 clip 设置生成的 view 的 clipsToBounds。 properties 通过反射给 view 设置属性，如：\"properties\": { \"layer.shadowOpacity\": 1 } 颜色，默认为透明。 - `border-width` 边框宽度，默认为 0。可以用 `\"1px\"`表示 1 像素的边框 - `border-color` 边框颜色，默认为黑色。 - `corner-radius` 圆角半径，默认为 0。可以使用 `corner-radius-top-left`、`corner-radius-top-right`、`corner-radius-bottom-left`、`corner-radius-bottom-right` 分别指定每个角的圆角半径。 - `user-interaction-enabled` 设置生成的 view 的userInteractionEnabled。默认不设置。 - `clip` 设置生成的 view 的 clipsToBounds。 - `properties` 通过反射给 view 设置属性，如：\"properties\": { \"layer.shadowOpacity\": 1 } --> 颜色 颜色使用 \"#rgb\"、\"#rrggbb\"、\"#argb\"、\"#aarrggbb\" 表示，如：\"#fff\" 表示白色。 颜色还可以使用以下名称定义： \"black\" \"darkgray\" \"lightgray\" \"white\" \"gray\" \"red\" \"green\" \"blue\" \"cyan\" \"yellow\" \"magenta\" \"orange\" \"purple\" \"brown\" \"transparent\" 阴影 Mist 目前没有提供阴影的支持，但是可以使用 properties 来实现 样式引用 可以在 styles 属性中定义样式，并在元素的 class 属性引用 元素上定义的样式优先级高于 class 中引用的样式 "},"basics/Property.html":{"url":"basics/Property.html","title":"属性","keywords":"","body":"属性模版属性元素属性事件repeat属性属性 模版属性 模版包含以下属性： .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } layout 模版的布局描述，类型为元素 controller 模版关联的 Controller 类名 state 模版的初始状态 data 值为字典，用于对数据做一些处理或适配，这里的计算结果会追加到数据 styles 样式表，定义一些可以被重复使用的样式，在元素中通过 class 属性引用 identifier 给模版指定一个 id async-display 是否启用异步渲染 Controller 类名 - `state` 模版的初始状态 - `data` 值为字典，用于对数据做一些处理或适配，这里的计算结果会追加到数据 - `styles` 样式表，定义一些可以被重复使用的样式，在元素中通过 class 属性引用 - `identifier` 给模版指定一个 id - `async-display` 是否启用异步渲染 --> 元素属性 所有元素都支持如下的属性（自定义元素不能使用样式属性） .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } type 元素类型，除预置的基本类型外，也可注册自定义组件，见[`自定义组件`](/components/CustomNode.md)。 gone 为 true 时，元素不显示，且不加入布局。 repeat 模版衍生机制。repeat 为元素重复的次数或重复的数组。注意：根节点元素使用 repeat 无效！详细说明 vars 定义变量（宏），详见这里。 class 引用在 styles 中定义的样式。可以引用多个样式，用空格分开，靠后的样式覆盖前面的样式。 style 元素的样式和布局属性 children 容器的子元素。目前支持的容器有 [`stack`](/components/stack.md), [`scroll`](/components/scroll.md), [`paging`](/components/paging.md) true 时，元素不显示，且不加入布局。 - `repeat` 模版衍生机制。repeat 为元素重复的次数或重复的数组。注意：根节点元素使用 repeat 无效！详细说明 - `vars` 定义变量（宏），详见这里。 - `class` 引用在 styles 中定义的样式。可以引用多个样式，用空格分开，靠后的样式覆盖前面的样式。 - `style` 元素的样式和布局属性 - `children` 容器的子元素。目前支持的容器有 [`stack`](/components/stack.md), [`scroll`](/components/scroll.md), [`paging`](/components/paging.md) --> 事件 所有元素（自定义元素除外）都支持如下的事件，事件的使用见事件处理。 .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } on-tap 元素被点击时触发 on-display 元素显示时触发。在列表中滑出可见区域再滑回来会重新触发 on-create 元素被创建时触发，此时还没显示 repeat属性 值为数字时，表示要重复的次数，自动增加 _index_ 变量表示当前重复项索引 值为数组时，表示要重复的数据，自动增加 _item_ 和 _idnex_ 表示当前重复项的数据和索引 1. 单层循环 a b c d e {\"width\":320,\"border-color\":\"#aaa\",\"border-width\":1,\"children\":[{\"repeat\":[\"a\",\"b\",\"c\",\"d\",\"e\"],\"flex-grow\":1,\"type\":\"text\",\"text\":\"${_item_}\",\"background-color\":\"${_index_ % 2 == 0 ? 'white' : '#ddd'}\"}]} 2. 多层循环 {\"width\":200,\"height\":200,\"direction\":\"vertical\",\"children\":[{\"repeat\":5,\"vars\":{\"i\":\"${_index_}\"},\"flex-grow\":1,\"children\":[{\"repeat\":5,\"flex-grow\":1,\"background-color\":\"${(_index_ % 2) + (i % 2) == 1 ? '#aaa' : '#ddd'}\"}]}]} "},"basics/Event.html":{"url":"basics/Event.html","title":"事件处理","keywords":"","body":"事件处理预置方法扩展once 事件Controller事件处理 模版中预置了一些常用事件，如 on-tap, on-display 等。 事件触发时可以调用若干个关联的 Controller 上的方法。使用字典描述，key 为方法名，值为方法参数（方法的第一个参数），如：\"on-tap\": { \"onTap:\": \"param\" } 相当于掉用 Controller 的 [Controller onTap:@\"param\"]。方法第二个参数为事件的触发者，可能是 view 或 node 等。 预置方法 在 controller 的基类上预置了如下几个常用方法： .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } openUrl: 打开指定的 URL updateState: 更新状态。值应该为一个字典，将状态中对应的值更新。注意不是替换整个状态，只是更改对应的 key。详见状态 状态 --> 扩展 现有的方法不能满足时，可以在模版对应的 controller 上添加方法，使用方法名即可调用。 如果想为所有模版增加方法，或覆盖现有方法。需要继承现有 controller 和 item 并重写 item 的 tplControllerClass 方法返回新的 controller 类，然后所有的 controller 和 item 都从这里创建的继承。 once 事件 所有事件都有对应的 -once 事件，表示只在第一次触发该事件时响应，如 on-display-once。 注意，once 事件是通过元素的索引（gone 为 true 的元素也有索引）来区分的。 Controller 每个模块都会创建一个 Controller，用于处理一些 native 逻辑，Controller 根据模版的 controller 属性自动创建。 同一模版根据不同数据生成的不同模块都有各自的 Controller 实例。 "},"basics/DataBinding.html":{"url":"basics/DataBinding.html","title":"数据绑定","keywords":"","body":"数据绑定表达式数据类型运算符方法调用命名规则注释lambda 表达式变量定义变量（宏）预置变量数据绑定 模版中可以使用表达式进行数据绑定。 模版中除 key 以外所有地方都可以写表达式，表达式写在 ${} 里。由于 json 结构的要求表达式只能写在字符串中，但表达式的计算结果不一定是字符串类型，如 \"a\": \"${2 > 1}\" 的结果为 \"a\": true。 一个字符串中也可以包含多个表达式，如 \"文字${表达式1}文字${表达式2}文字\"，这种情况下表达式结果会作为字符串替换到原始字符串中。 表达式中可以访问当前作用域中的变量。 表达式 数据类型 string 使用单引号或双引号限定，如：\"it's mine\"、'\"'，转义规则跟 json 一样（多一个\\'） number 如：123、1.23E-10，规则跟 json 一样 boolean 值只能为 true 和 false null 值只能为 null 或 nil array 如：[123, 'string', true] dictionary 如：{'key': 'value', 'key2': 123}，由于在模版中使用 ${} 绑定表达式，因此表达式中不能直接写 dictionary。 运算符 算术运算符 支持 +, -, *, /, % 支持一元运算符 - 当+运算符的操作数中含有 string 时，进行字符串拼接 比较运算符 支持 >, , >=, , ==, != >, , >=, 进行数值比较 ==, != 如果两个操作数都不为 null，调用 -[NSObject isEqual:] 进行比较，否则进行数值比较 逻辑运算符 支持 &&, ||, ! 条件表达式 条件表达式 ?:，如：a > b ? a : b 支持省略形式，如：a ?: b 下标运算符 运算符 []，用于索引 array 或 dictionary 的元素，如：array[3], dict['key'] 方法调用 方法调用规则类似 JSPatch，使用下划线_替换掉selector中的:，末尾的:可省略，下面展示了 Objective-C 调用对应的表示方法： str.length → str.length [array addObject:@1] → array.addObject(1) [str replace:@\"a\" with:@\"b\"] → str.replace_with('a', 'b') [obj a_b:123] → obj.a__b(123) [SomeClass classMethod] → SomeClass.classMethod [VZTGlobalFunctions max:1 :2] → VZTGlobalFunctions.max(1, 2) 注意，. 运算符不带参数时会优先尝试 dictionary 取值，可以在末尾加 () 显式指定调用函数，如：array.count() 可以用 Category 为一些基本类型增加扩展方法，增加的扩展方法为避免与其它 framework 冲突，最好加一个 vzt_ 前缀，如： @implementation NSString (VZTExtension) - (NSString *)vzt_toUpper { return [self uppercaseString]; } @end 使用时可以省略 vzt_ 前缀，如 'abc'.toUpper 预置了一些全局函数，如 min, round, random 等，详见 VZTGlobalFunctions 类。可以通过 category 为其扩展更多函数。 max(a, b) random() 不支持调用参数类型包含结构体的方法 命名规则 变量或函数名称只能包含 大小写字母A-Za-z、数字0-9、下划线_，且不能以数字开始 注释 支持以 // 开始的行注释，和 /* 开始的块注释 lambda 表达式 支持简单的 lambda 表达式，写法为 参数 -> 返回值，如： list.filter(item -> item.length > 0) 变量 定义变量（宏） 在模版元素中可以用 vars 属性定义一些变量，这些变量只能在该作用域使用，重复的变量名会隐藏上层作用域的同名变量（即就近原则）。由于 json 中的 字典是无序的，所以在同一个 vars 中定义的变量不能使用在该层定义的其它变量，这种情况可以像下面这样定义成一个数组： \"vars\": [ { \"a\": 1 }, { \"b\": \"${a + 1}\" } ] 预置变量 .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } _width_ 屏幕宽度 _height_ 屏幕高度 "},"tools/VSCode.html":{"url":"tools/VSCode.html","title":"VSCode 插件","keywords":"","body":"VSCode 插件安装更新使用代码高亮代码提示模版布局结构注释格式化快速跳转调试VSCode 插件 Visual Studio Code (简称 VS Code / VSC) 是一款免费开源的现代化轻量级代码编辑器，支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义热键、括号匹配、代码片段、代码对比 Diff、GIT 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。软件跨平台支持 Win、Mac 以及 Linux，功能强大，运行流畅。下载地址 Mist 的 Visual Studio Code 插件提供属性提示、Node树预览等功能，提高开发效率。 安装 直接在 VSCode 的扩展商店搜索 MIST 即可安装 更新 VSCode 默认会自动更新插件 使用 大部分功能需要编辑器语言设置为 MIST 才能使用，如果是 .mist 文件，会自动设置为 MIST 语言。 代码高亮 对模版中表达式进行语法高亮。对模版中的错误进行提示，目前包括 Json 语法错误、重复属性、表达式语法。 代码提示 编写 Mist 模版时会根据上下文提示当前可用属性，鼠标移到属性名或枚举值上可以显示属性描述。 Your browser does not support the video tag. 模版布局结构 在编辑 Mist 模版文件时，左侧的资源管理器里的 MIST OUTLINE 会显示模版的布局结构和 node 的一些关键信息，方便定位。点击节点可选中并跳转到对应的代码位置。 注释 可以在模版中使用 // 和 /* */ 添加注释，注释能被正常高亮、格式化，并且在 MIST OUTLINE 中也会显示元素的注释。推荐在模版中多用注释，方便修改时快速定位元素。 格式化 在编辑器中右键选择 Format Document 可以格式化当前文档，也可使用快捷键 ⇧ ⌥ F 或自定义其它快捷键。 选中文本时右键选择 Format Selection 可格式化选中部分。 快速跳转 点击编辑器右上角的 Show Data File 按钮可以从模版文件跳转到对应的数据文件（.json），并滚动到引用该模版的位置。如果找到多个文件或位置使用该模版，会弹出选择框。 目前按照正则式匹配，并只在模版所在目录下查找 .json 文件，不一定能正确找到。 调试 点击编辑器右上角的 Start Mist Debug Server 按钮开启调试服务器，功能与 mist-toolkit 的 mist -s 类似。开启后图标会变成停止图标，点击可以关闭服务器。 目前有个小问题是，\u001d使用过这个功能后模版文件夹下会自动添加一个 .vscode 文件夹，里面保存了 Mist 插件的配置文件，可以把这个文件夹添加到 .gitignore 里。 "},"tools/Sublime.html":{"url":"tools/Sublime.html","title":"Sublime 插件","keywords":"","body":"Sublime 插件安装更新使用代码高亮代码提示Quick MenuSublime 插件 Mist 的 Sublime 插件提供属性提示、快速跳转等功能，提高开发效率。 已不再更新，推荐使用 VSCode 插件 安装 首先确保你使用的 Sublime Text 版本不低于 3092，如果不是请在这里安装最新版。 可以直接使用 PackageControl 搜索 MIST 安装，或者从 github 上下载，详见这里。 更新 PackageControl 使用 Package Control: Upgrade Package 命令更新所有插件。 如果是手动安装的，则从 github 拉取最新代码即可。 使用 编写 MIST 模版时，如果是 .mist 文件，应该会自动设置为 MIST 语法。如果没有，按 command + shift + P 打开命令面板，键入 MIST，选择 Set Syntax: MIST 项设置为 MIST 语法。 代码高亮 插件的代码高亮相比于 Sublime Text 原生的 Json 代码高亮做了一些改进，主要有以下几点： 字典的 key 与其它字符串颜色区分开 字符串中的数字高亮，如 \"10\", \"50%\", \"1px\" 对字符串中的表达式进行高亮 对 Json 语法错误高亮 --> 代码提示 Your browser does not support the video tag. 演示中是比较老的模版格式 Quick Menu 在模版文件中按 command + shift + M 可以打开菜单，根据当前文件类型可能出现以下菜单项： Jump To Data File 从模版文件跳转到对应的数据文件（.json），并滚动到引用该模版的位置。如果找到多个文件或位置使用该模版，会弹出选择框。 Jump To Template File 跳转到对应的模版文件（.mist）。如果当前是 JS 文件，则跳转到相同文件名的模版文件；如果当前是数据文件，则跳转到光标处所对应的模版文件。 Jump To JS File 从模版文件跳转到对应的 JS 文件（.js） List All Blocks 列出当前数据文件中包含的所有 block。 "},"components/node.html":{"url":"components/node.html","title":"node","keywords":"","body":"node 元素示例node 元素 最基本的元素类型，类似于 iOS 的 UIView 或 Android 的 View，可以设置背景色、边框等属性，常用于分割线、色块等。 不指定 type 时默认为此类型。 示例 {\"style\":{\"height\":\"1px\",\"background-color\":\"#ccc\"}} "},"components/stack.html":{"url":"components/stack.html","title":"stack","keywords":"","body":"stack 元素属性stack 元素 基本的容器组件，不指定 type 的容器元素（含有 children 的元素）默认为此类型。 属性 .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } highlight-background-color 按下状态时的背景颜色。 颜色。 --> "},"components/text.html":{"url":"components/text.html","title":"text","keywords":"","body":"text 元素属性富文本text 元素 用于显示文字 属性 .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } text 显示的文字 html-text 使用 HTML 表示的富文本，指定这个属性后，text 属性将被忽略。 color 文字颜色。默认为黑色。 font-size 字体大小。 font-name 字体名。默认为系统字体。 font-style ultra-light thin light normal medium bold heavy black italic bold-italic 字体样式。 alignment left center right natural justify 文字水平对齐方式。默认为 left。 vertical-alignment top center bottom 文字竖直对齐方式。默认为 center。 line-break-mode word char 文字换行方式。默认为 word。 truncation-mode truncating-head truncating-middle truncating-tail none 文字省略方式。默认为 truncating-tail。 lines 最大行数。为 0 时，不限制行数。默认为 1。 line-spacing 行间距。 kern 字间距。需要注意文字的最右边也会有一个字距大小的空白，一般可以通过设置 margin-right 来修正。如： \"kern\": 5, \"margin-right\": -5 adjusts-font-size 是否调整字号以适应控件的宽度，默认为false。 mini-scale-factor 与adjusts-font-size配合使用，设置一个字号调整的最小系数，设置为0时，字号会调整至内容能完全展示。 富文本，指定这个属性后，text 属性将被忽略。 - `color` 文字颜色。默认为黑色。 - `font-size` 字体大小。 - `font-name` 字体名。默认为系统字体。 - `font-style` 字体样式。 - `alignment` 文字水平对齐方式。默认为 left。 - `vertical-alignment` 文字竖直对齐方式。默认为 center。 - `line-break-mode` 文字换行方式。默认为 word。 - `truncation-mode` 文字省略方式。默认为 truncating-tail。 - `lines` 最大行数。为 0 时，不限制行数。默认为 1。 - `line-spacing` 行间距。 - `kern` 字间距。需要注意文字的最右边也会有一个字距大小的空白，一般可以通过设置 margin-right 来修正。如： \"kern\": 5, \"margin-right\": -5 - `adjusts-font-size` 是否调整字号以适应控件的宽度，默认为false。 - `mini-scale-factor` 与adjusts-font-size配合使用，设置一个字号调整的最小系数，设置为0时，字号会调整至内容能完全展示。 --> 富文本 可以设置 html-text 属性来用 html 描述富文本。 需要注意 &、、> 符号需要转义成 &amp;、&lt;、&gt;，否则整个文本都不能被正常解析。在表达式中使用时，需要给变量转义，如：\"html-text\": \"${VZMistHTMLStringParser.htmlEncodedString(text)}\"。 支持的特性如下： 粗体 使用, 标签表示粗体文字 bold bold 斜体 使用, , , 标签表示斜体文字 italic italic 等宽字体 使用标签表示等宽字体 normal monospace normal monospace 大号字体 使用标签使字体变大25% normal big normal big 小号字体 使用标签使字体变小20% normal small normal small 字体 使用标签指定字体 face 字体名 size 字体尺寸，系统单位 color 字体颜色 Some Text Some Text 下划线 使用标签添加下划线 underline underline 删除线 使用标签添加删除线 strikethrough strikethrough 标题 使用, , , , , 标签表示标题 段落与换行 使用标签表示段落，标签表示换行。注意，这里的不能使用单标签。 段落1段落2换行 段落1段落2换行 图片 使用标签插入图片，src 为图片名，只能使用本地图片，标签内的内容为图片不存在时的替代文本。 "},"components/image.html":{"url":"components/image.html","title":"image","keywords":"","body":"image 元素属性事件image 元素 图片元素，可展示本地图片和网络图片。网络图片自动缓存。展示本地图片时，使用 image 属性，如 \"image\": \"O2O.bundle/arrow\"。展示网络图片时，使用 image-url 指定网络图片，image 指定加载中显示的图片，error-image 指定下载失败时显示的图片。 属性 .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } image 显示的图片名，只能使用本地图片。规则同 [UIImage imageNamed:]。 image-url 网络图片地址。可以使用 url地址 和 cloudId。 error-image 网络图片下载失败时显示的图片，只能使用本地图片，如果没有指定则显示 image。注意：image-url 为空时，将会使用 image 而不是 error-image。 content-mode center scale-to-fill scale-aspect-fit scale-aspect-fill 图片缩放模式，默认为 scale-to-fill。center 图片不缩放，居中显示。scale-to-fill 图片缩放至元素尺寸，不保留宽高比。scale-aspect-fit 图片按长边缩放，图片能完全显示，可能填不满元素。scale-aspect-fill 图片按短边缩放，图片能填满元素，可能显示不完全。 [UIImage imageNamed:]。 - `image-url` 网络图片地址。可以使用 url地址 和 cloudId。 - `error-image` 网络图片下载失败时显示的图片，只能使用本地图片，如果没有指定则显示 image。注意：image-url 为空时，将会使用 image 而不是 error-image。 - `content-mode` 图片缩放模式，默认为 scale-to-fill。center 图片不缩放，居中显示。scale-to-fill 图片缩放至元素尺寸，不保留宽高比。scale-aspect-fit 图片按长边缩放，图片能完全显示，可能填不满元素。scale-aspect-fill 图片按短边缩放，图片能填满元素，可能显示不完全。 - `download-scale` 使用 cloudId 下载图片时，会按照图片框尺寸下载，但如果图片框尺寸跟图片原始尺寸的宽高比不同，下载的图片会比期望尺寸小（类似UIViewContentModeScaleAspectFit），图片就会模糊，这种情况下可以指定一个大一点的 download-scale，比如 1.3。默认为 1。 - `business` 图片下载需要传入 business key。可以在重写 O2OMistListItem 的 - (NSString *)defaultBusiness 来为所有图片设置一个相同的 key。 --> 事件 .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } on-complete 图片下载完成时触发 "},"components/button.html":{"url":"components/button.html","title":"button","keywords":"","body":"button 元素属性按钮状态button 元素 按钮元素，可以设置按下时的文字颜色等 属性 .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } title 显示的文字。支持状态。 image 显示的图片，只能为本地图片，图片固定显示在文字左边。支持状态。 background-image 按钮背景图片，只能为本地图片，也可以设置为颜色。支持状态。 title-color 文字颜色。默认为黑色。支持状态。 font-size 字体大小。 font-name 字体名。默认为系统字体。 font-style ultra-light thin light normal medium bold heavy black italic bold-italic 字体样式。 enlarg-size 放大按钮的点击区域。如： \"enlarge-size\": 5 上下左右各放大 5 \"enlarge-size\": [5, 10] 左右放大 5，上下放大 10 状态。 - `image` 显示的图片，只能为本地图片，图片固定显示在文字左边。支持状态。 - `background-image` 按钮背景图片，只能为本地图片，也可以设置为颜色。支持状态。 - `title-color` 文字颜色。默认为黑色。支持状态。 - `font-size` 字体大小。 - `font-name` 字体名。默认为系统字体。 - `font-style` 字体样式。 - `enlarg-size` 放大按钮的点击区域。如： \"enlarge-size\": 5 上下左右各放大 5 \"enlarge-size\": [5, 10] 左右放大 5，上下放大 10 --> 按钮状态 支持的状态：normal、highlighted、disabled、selected。按钮可以为不同状态设置不同的 title、title-color、image、background-image。 示例： { \"type\": \"button\", \"background-image\": \"white\", \"title\": { \"normal\": \"button\", \"highlighted\": \"clicked\" } } "},"components/scroll.html":{"url":"components/scroll.html","title":"scroll","keywords":"","body":"scroll 元素属性scroll 元素 滚动容器元素，使用 children 定义子元素。 注意：scroll 元素的尺寸不会根据它的子元素自适应。 属性 .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } scroll-direction none horizontal vertical both 滚动方向。默认为 horizontal。与 direction 不同，direction 表示子元素实际布局方向，scroll-direction表示该方向上不限制子元素的尺寸none 水平方向和竖直方向都不允许滚动。horizontal 水平方向滚动。vertical 竖直方向滚动。both 水平方向和竖直方向都可以滚动。 scroll-enabled 是否允许用户拖动。 与 direction 不同，direction 表示子元素实际布局方向，scroll-direction表示该方向上不限制子元素的尺寸none 水平方向和竖直方向都不允许滚动。horizontal 水平方向滚动。vertical 竖直方向滚动。both 水平方向和竖直方向都可以滚动。 - `scroll-enabled` 是否允许用户拖动。 --> "},"components/paging.html":{"url":"components/paging.html","title":"paging","keywords":"","body":"paging 元素属性事件paging 元素 分页元素，使用 children 定义子元素，每个子元素就是一页。 注意 paging 元素的尺寸不会根据它的子元素自适应，所以 paging 元素一定要设置尺寸。 paging 元素不能使用容器属性。 所有子元素都按照 paging 元素的尺寸布局，子元素的 margin 不能为 auto。 属性 .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } direction horizontal vertical 滚动方向。默认为 horizontal。horizontal 水平方向滚动。vertical 竖直方向滚动。 scroll-enabled 是否允许用户拖动。默认为 true。 paging 是否以分页的方式滚动。默认为 true。 auto-scroll 自动滚动的时间间隔，单位为秒，为 0 表示不自动滚动。默认为 0。 infinite-loop 是否循环滚动。默认为 false。 page-control 是否显示 Page Control。默认为 false。 page-control-scale Page Control 缩放倍率，用于控制 Page Control 的大小。默认为 1。 page-control-color Page Control 圆点的颜色。默认为半透明的白色。 page-control-selected-color Page Control 当前页圆点的颜色。默认为白色。 page-control-margin-left page-control-margin-right page-control-margin-top page-control-margin-bottom Page Control 距容器边缘的边距，用于控制 Page Control 的位置，跟 fixed 元素的 margin 规则相同。默认值为 auto，即默认显示在容器中间。 horizontal 水平方向滚动。vertical 竖直方向滚动。 - `scroll-enabled` 是否允许用户拖动。默认为 true。 - `paging` 是否以分页的方式滚动。默认为 true。 - `auto-scroll` 自动滚动的时间间隔，单位为秒，为 0 表示不自动滚动。默认为 0。 - `infinite-loop` 是否循环滚动。默认为 false。 - `page-control` 是否显示 Page Control。默认为 false。 - `page-control-scale` Page Control 缩放倍率，用于控制 Page Control 的大小。默认为 1。 - `page-control-color` Page Control 圆点的颜色。默认为半透明的白色。 - `page-control-selected-color` Page Control 当前页圆点的颜色。默认为白色。 - `page-control-margin-left page-control-margin-right page-control-margin-top page-control-margin-bottom` Page Control 距容器边缘的边距，用于控制 Page Control 的位置，跟 fixed 元素的 margin 规则相同。默认值为 auto，即默认显示在容器中间。 --> 事件 .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } on-switch （手动或自动）翻页时触发 "},"components/indicator.html":{"url":"components/indicator.html","title":"indicator","keywords":"","body":"indicator 元素属性indicator 元素 加载指示器，俗称菊花。 属性 .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } color 菊花的颜色，默认为白色。 颜色，默认为白色。 --> "},"components/line.html":{"url":"components/line.html","title":"line","keywords":"","body":"line 元素属性line 元素 线条元素，主要用于展示虚线，其粗细、长度由布局属性控制。 属性 .prop { background-color: rgba(226, 72, 16, 0.05); word-wrap: break-word; padding: 20px 10px; } .prop:nth-child(2n) { background-color: rgba(226, 72, 16, 0.08); } .hash-link { visibility: hidden; } h1:hover .hash-link, h2:hover .hash-link, h3:hover .hash-link, h4:hover .hash-link, h5:hover .hash-link, h6:hover .hash-link { visibility: visible; } .prop code { background-color: white; } .prop pre { background-color: white; } color 线条的颜色，默认为黑色。 dash-length 虚线的线段长度，不设置时为实线。 space-length 虚线的空白长度，不设置时为实线。 颜色，默认为黑色。 - `dash-length` 虚线的线段长度，不设置时为实线。 - `space-length` 虚线的空白长度，不设置时为实线。 --> "},"components/CustomNode.html":{"url":"components/CustomNode.html","title":"自定义组件","keywords":"","body":"自定义组件自定义组件 模版中可以方便的嵌入现有的 native view，通过 -[VZMist registerTag:withProcessor:] 注册，示例如下： [[VZMist sharedInstance] registerTag:@\"custom-button\" withProcessor:^VZFNode *(VZ::NodeSpecs specs, NSDictionary *tpl, id item, VZTExpressionContext *data) { NSString *title = [tpl valueForKeyPath:@\"style.title\"]; VZMistTemplateEvent *event = [VZMistTemplateEvent eventWithName:@\"on-tap\" dict:tpl expressionContext:data item:item]; return [VZFCustomNode newWithViewFactory:^(CGRect frame) { // frame 为布局后的尺寸 CustomButton *button = [[CustomButton alloc] initWithFrame:frame title:title]; [button addTarget:event action:@selector(invokeWithSender:) forControlEvents:UIControlEventTouchUpInside]; return button; } NodeSpecs:specs Measure:^(CGSize constrainedSize) { // measure 函数，不传 measure 函数的话 custom node 在使用时需指定大小 VZFTextNodeRenderer *renderer = [VZFTextNodeRenderer new]; renderer.text = [[NSAttributedString alloc] initWithString:title attributes:@{NSFontAttributeName : [UIFont systemFontOfSize:17]}]; renderer.maxSize = CGSizeMake(constrainedSize.width - 20, constrainedSize.height - 10); CGSize size = [renderer textSize]; return CGSizeMake(size.width + 20, size.height + 10); }]; }]; {\"type\":\"custom-button\",\"on-tap\":{\"alert:\":\"Hello !\"},\"style\":{\"title\":\"Custom Button\",\"margin-top\":10,\"margin-bottom\":10,\"align-self\":\"center\"}} 注册的代码可以写在任何位置，只要保证在读模版前注册即可。注册已有的元素名会覆盖原来的实现，如可以注册 image 标签，来实现一些特殊的逻辑。 注意，自定义组件中，只能使用布局属性，不能使用样式、tag、事件等属性，如果需要，可以给它加一个容器，然后把属性设置到容器上。 "}}